
import "enums/TripSpeedSourceProto.proto";
import "enums/EnhancedPositionSourceProto.proto";

message EventHeader {
	// Protocol buffer template id
	required uint32 TemplateId = 1;

	// Unit identifier
	optional string UnitId = 2;

	// Event description
	optional string Description = 3;

	// Seconds since 1970.01.01
	optional uint64 UtcTimestampSeconds = 4;

	// Degrees -90...90
	optional double Latitude = 5;

	// Degrees -180...180
	optional double Longitude = 6;

	// Km/h
	optional uint32 Speed = 7;

	// Degrees 0..360
	optional uint32 Direction = 8;

	// Kilometers
	optional uint32 Odometer = 9;

	// Bitmask
	optional uint32 InputStatus = 10;

	// Bitmask
	optional uint32 OutputStatus = 11;

	// Driver identifier
	optional uint32 DriverKeyCode = 12;

	// Not used for incoming events
	optional uint32 Source = 13;

        // General Status flags (Use GeneralStatusType enum to check which flags have been set)
        optional uint32 GeneralStatus = 14;

	// Trip speed source
	optional TripSpeedSource TripSpeedSource = 17 [default = TRIP_SPEED_SOURCE_NOT_SUPPORTED];

	repeated EnhancedPosition SnapToRoad = 18;

	optional bytes RawData = 19;

	// Driver identifier as byte array
	optional bytes DriverIdBytes = 20;

	// Ignition Status extended information
	optional IgnitionStatus IgnitionStatus = 21;

	// Number of satelittes
	optional uint32 NumberOfSatellites = 22;

	// Power supply status
	optional PowerSupplyStatus PowerSupplyStatus = 23;
}

message EnhancedPosition {
	required EnhancedPositionSource Source = 1;

	// Degrees -90...90
	required double Latitude = 2;

	// Degrees -180...180
	required double Longitude = 3;

	// Meters
	optional double Altitude = 4;
}

// Vehicle Ignition Status
message IgnitionStatus {
	// Indication whether ignition on/off information is available
	required bool IgnitionInformationAvailable = 1;

	// The ignition on or off state
	optional bool Ignition = 2;
}

// Power Supply Status
message PowerSupplyStatus {
	// External voltage level VIn, unit: Volt
	optional float external_voltage_level = 1;

	// Internal Device Battery voltage level VBat, unit: Volt
	optional float internal_battery_voltage_level = 2;

	// Internal Device Battery percentage level, unit: %
	optional float internal_battery_percentage_level = 3;

	// External usb input voltage level VUsbIn, unit: Volt
	optional float external_usb_input_voltage_level = 4;
}
